/* eslint-disable */
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// dist/index.js
var dist_exports = {};
__export(dist_exports, {
  BG: () => core_exports,
  GOOG_API_KEY: () => GOOG_API_KEY,
  GOOG_BASE_URL: () => GOOG_BASE_URL,
  USER_AGENT: () => USER_AGENT,
  YT_BASE_URL: () => YT_BASE_URL,
  base64ToU8: () => base64ToU8,
  buildURL: () => buildURL,
  default: () => dist_default,
  u8ToBase64: () => u8ToBase64
});
module.exports = __toCommonJS(dist_exports);

// dist/core/index.js
var core_exports = {};
__export(core_exports, {
  BotGuardClient: () => BotGuardClient,
  Challenge: () => challengeFetcher_exports,
  PoToken: () => webPoClient_exports,
  WebPoMinter: () => WebPoMinter
});

// dist/core/challengeFetcher.js
var challengeFetcher_exports = {};
__export(challengeFetcher_exports, {
  create: () => create,
  descramble: () => descramble,
  parseChallengeData: () => parseChallengeData
});

// dist/utils/constants.js
var GOOG_BASE_URL = "https://jnn-pa.googleapis.com";
var YT_BASE_URL = "https://www.youtube.com";
var GOOG_API_KEY = "AIzaSyDyT5W0Jh49F30Pqqtyfdf7pDLFKLJoAnw";
var USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36(KHTML, like Gecko)";

// dist/utils/helpers.js
var base64urlCharRegex = /[-_.]/g;
var base64urlToBase64Map = {
  "-": "+",
  _: "/",
  ".": "="
};
function base64ToU8(base64) {
  let base64Mod;
  if (base64urlCharRegex.test(base64)) {
    base64Mod = base64.replace(base64urlCharRegex, function(match) {
      return base64urlToBase64Map[match];
    });
  } else {
    base64Mod = base64;
  }
  base64Mod = atob(base64Mod);
  const result = new Uint8Array([...base64Mod].map((char) => char.charCodeAt(0)));
  return result;
}
function u8ToBase64(u8, base64url = false) {
  const result = btoa(String.fromCharCode(...u8));
  if (base64url) {
    return result.replace(/\+/g, "-").replace(/\//g, "_");
  }
  return result;
}
function buildURL(endpointName, useYouTubeAPI) {
  return `${useYouTubeAPI ? YT_BASE_URL : GOOG_BASE_URL}/${useYouTubeAPI ? "api/jnn/v1" : "$rpc/google.internal.waa.v1.Waa"}/${endpointName}`;
}

// dist/core/challengeFetcher.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function create(bgConfig, interpreterHash) {
  return __awaiter(this, void 0, void 0, function* () {
    const requestKey = bgConfig.requestKey;
    if (!bgConfig.fetch)
      throw new Error("[Challenge]: Fetch function not provided");
    const payload = [requestKey];
    if (interpreterHash)
      payload.push(interpreterHash);
    const response = yield bgConfig.fetch(buildURL("Create", bgConfig.useYouTubeAPI), {
      method: "POST",
      headers: {
        "content-type": "application/json+protobuf",
        "x-goog-api-key": GOOG_API_KEY,
        "x-user-agent": "grpc-web-javascript/0.1"
      },
      body: JSON.stringify(payload)
    });
    if (!response.ok)
      throw new Error(`[Challenge]: Failed to fetch challenge: ${response.status}`);
    const rawData = yield response.json();
    return parseChallengeData(rawData);
  });
}
function parseChallengeData(rawData) {
  let challengeData = [];
  if (rawData.length > 1 && typeof rawData[1] === "string") {
    const descrambled = descramble(rawData[1]);
    challengeData = JSON.parse(descrambled || "[]");
  } else if (rawData.length && typeof rawData[0] === "object") {
    challengeData = rawData[0];
  }
  const [messageId, wrappedScript, wrappedUrl, interpreterHash, program, globalName, , clientExperimentsStateBlob] = challengeData;
  const privateDoNotAccessOrElseSafeScriptWrappedValue = Array.isArray(wrappedScript) ? wrappedScript.find((value) => value && typeof value === "string") : null;
  const privateDoNotAccessOrElseTrustedResourceUrlWrappedValue = Array.isArray(wrappedUrl) ? wrappedUrl.find((value) => value && typeof value === "string") : null;
  return {
    messageId,
    interpreterJavascript: {
      privateDoNotAccessOrElseSafeScriptWrappedValue,
      privateDoNotAccessOrElseTrustedResourceUrlWrappedValue
    },
    interpreterHash,
    program,
    globalName,
    clientExperimentsStateBlob
  };
}
function descramble(scrambledChallenge) {
  const buffer = base64ToU8(scrambledChallenge);
  if (buffer.length)
    return new TextDecoder().decode(buffer.map((b) => b + 97));
}

// dist/core/webPoClient.js
var webPoClient_exports = {};
__export(webPoClient_exports, {
  decodePlaceholder: () => decodePlaceholder,
  generate: () => generate,
  generatePlaceholder: () => generatePlaceholder
});

// dist/core/botGuardClient.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var BotGuardClient = class _BotGuardClient {
  constructor(options) {
    this.vmFunctions = {};
    this.userInteractionElement = options.userInteractionElement;
    this.vm = options.globalObj[options.globalName];
    this.program = options.program;
  }
  static create(options) {
    return __awaiter2(this, void 0, void 0, function* () {
      return yield new _BotGuardClient(options).load();
    });
  }
  load() {
    return __awaiter2(this, void 0, void 0, function* () {
      if (!this.vm)
        throw new Error("[BotGuardClient]: VM not found in the global object");
      if (!this.vm.a)
        throw new Error("[BotGuardClient]: Could not load program");
      const vmFunctionsCallback = (asyncSnapshotFunction, shutdownFunction, passEventFunction, checkCameraFunction) => {
        Object.assign(this.vmFunctions, { asyncSnapshotFunction, shutdownFunction, passEventFunction, checkCameraFunction });
      };
      try {
        this.syncSnapshotFunction = yield this.vm.a(this.program, vmFunctionsCallback, true, this.userInteractionElement, () => {
        }, [[], []])[0];
      } catch (error) {
        throw new Error(`[BotGuardClient]: Failed to load program (${error.message})`);
      }
      return this;
    });
  }
  /**
   * @example
   * ```ts
   * const result = await botguard.snapshot({
   *   contentBinding: {
   *     c: "a=6&a2=10&b=SZWDwKVIuixOp7Y4euGTgwckbJA&c=1729143849&d=1&t=7200&c1a=1&c6a=1&c6b=1&hh=HrMb5mRWTyxGJphDr0nW2Oxonh0_wl2BDqWuLHyeKLo",
   *     e: "ENGAGEMENT_TYPE_VIDEO_LIKE",
   *     encryptedVideoId: "P-vC09ZJcnM"
   *    }
   * });
   *
   * console.log(result);
   * ```
   */
  snapshot(args) {
    return __awaiter2(this, void 0, void 0, function* () {
      return new Promise((resolve, reject) => {
        if (!this.vmFunctions.asyncSnapshotFunction)
          return reject(new Error("[BotGuardClient]: Async snapshot function not found"));
        this.vmFunctions.asyncSnapshotFunction((response) => resolve(response), [
          args.contentBinding,
          args.signedTimestamp,
          args.webPoSignalOutput,
          args.skipPrivacyBuffer
        ]);
      });
    });
  }
  invoke(args) {
    return __awaiter2(this, void 0, void 0, function* () {
      if (!this.syncSnapshotFunction)
        throw new Error("[BotGuardClient]: Sync snapshot function not found");
      const result = yield this.syncSnapshotFunction([
        args.contentBinding,
        args.signedTimestamp,
        args.webPoSignalOutput,
        args.skipPrivacyBuffer
      ]);
      return result;
    });
  }
  passEvent(args) {
    if (!this.vmFunctions.passEventFunction)
      throw new Error("[BotGuardClient]: Pass event function not found");
    this.vmFunctions.passEventFunction(args);
  }
  checkCamera(args) {
    if (!this.vmFunctions.checkCameraFunction)
      throw new Error("[BotGuardClient]: Check camera function not found");
    this.vmFunctions.checkCameraFunction(args);
  }
  shutdown() {
    if (!this.vmFunctions.shutdownFunction)
      throw new Error("[BotGuardClient]: Shutdown function not found");
    this.vmFunctions.shutdownFunction();
  }
};

// dist/core/webPoMinter.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var WebPoMinter = class _WebPoMinter {
  constructor(mintCallback) {
    this.mintCallback = mintCallback;
  }
  static create(integrityTokenResponse, webPoSignalOutput) {
    return __awaiter3(this, void 0, void 0, function* () {
      var _a;
      const getMinter = webPoSignalOutput[0];
      if (!getMinter)
        throw new Error("PMD:Undefined");
      const mintCallback = yield getMinter(base64ToU8((_a = integrityTokenResponse.integrityToken) !== null && _a !== void 0 ? _a : ""));
      if (!(mintCallback instanceof Function))
        throw new Error("APF:Failed");
      return new _WebPoMinter(mintCallback);
    });
  }
  mintAsWebsafeString(identifier) {
    return __awaiter3(this, void 0, void 0, function* () {
      const result = yield this.mint(identifier);
      return u8ToBase64(result, true);
    });
  }
  mint(identifier) {
    return __awaiter3(this, void 0, void 0, function* () {
      const result = yield this.mintCallback(new TextEncoder().encode(identifier));
      if (!result)
        throw new Error("YNJ:Undefined");
      if (!(result instanceof Uint8Array))
        throw new Error("ODM:Invalid");
      return result;
    });
  }
};

// dist/core/webPoClient.js
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function generate(args) {
  return __awaiter4(this, void 0, void 0, function* () {
    const { program, bgConfig, globalName } = args;
    const { identifier } = bgConfig;
    const botguard = yield BotGuardClient.create({ program, globalName, globalObj: bgConfig.globalObj });
    const webPoSignalOutput = [];
    const botguardResponse = yield botguard.snapshot({ webPoSignalOutput });
    const payload = [bgConfig.requestKey, botguardResponse];
    const integrityTokenResponse = yield bgConfig.fetch(buildURL("GenerateIT", bgConfig.useYouTubeAPI), {
      method: "POST",
      headers: {
        "content-type": "application/json+protobuf",
        "x-goog-api-key": GOOG_API_KEY,
        "x-user-agent": "grpc-web-javascript/0.1"
      },
      body: JSON.stringify(payload)
    });
    const integrityTokenJson = yield integrityTokenResponse.json();
    const [integrityToken, estimatedTtlSecs, mintRefreshThreshold, websafeFallbackToken] = integrityTokenJson;
    const integrityTokenData = {
      integrityToken,
      estimatedTtlSecs,
      mintRefreshThreshold,
      websafeFallbackToken
    };
    const webPoMinter = yield WebPoMinter.create(integrityTokenData, webPoSignalOutput);
    const poToken = yield webPoMinter.mintAsWebsafeString(identifier);
    return { poToken, integrityTokenData };
  });
}
function generatePlaceholder(identifier, clientState) {
  const encodedIdentifier = new TextEncoder().encode(identifier);
  if (encodedIdentifier.length > 118)
    throw new Error("DFO:Invalid");
  const timestamp = Math.floor(Date.now() / 1e3);
  const randomKeys = [Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)];
  const header = randomKeys.concat([
    0,
    clientState !== null && clientState !== void 0 ? clientState : 1
  ], [
    timestamp >> 24 & 255,
    timestamp >> 16 & 255,
    timestamp >> 8 & 255,
    timestamp & 255
  ]);
  const packet = new Uint8Array(2 + header.length + encodedIdentifier.length);
  packet[0] = 34;
  packet[1] = header.length + encodedIdentifier.length;
  packet.set(header, 2);
  packet.set(encodedIdentifier, 2 + header.length);
  const payload = packet.subarray(2);
  const keyLength = randomKeys.length;
  for (let i = keyLength; i < payload.length; i++) {
    payload[i] ^= payload[i % keyLength];
  }
  return u8ToBase64(packet, true);
}
function decodePlaceholder(placeholder) {
  const packet = base64ToU8(placeholder);
  const payloadLength = packet[1];
  const totalPacketLength = 2 + payloadLength;
  if (packet.length !== totalPacketLength)
    throw new Error("Invalid packet length.");
  const payload = packet.subarray(2);
  const keyLength = 2;
  for (let i = keyLength; i < payload.length; ++i) {
    payload[i] ^= payload[i % keyLength];
  }
  const keys = [payload[0], payload[1]];
  const unknownVal = payload[2];
  const clientState = payload[3];
  const timestamp = payload[4] << 24 | payload[5] << 16 | payload[6] << 8 | payload[7];
  const date = new Date(timestamp * 1e3);
  const identifier = new TextDecoder().decode(payload.subarray(8));
  return {
    identifier,
    timestamp,
    unknownVal,
    clientState,
    keys,
    date
  };
}

// dist/index.js
var dist_default = core_exports;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BG,
  GOOG_API_KEY,
  GOOG_BASE_URL,
  USER_AGENT,
  YT_BASE_URL,
  base64ToU8,
  buildURL,
  u8ToBase64
});
//# sourceMappingURL=index.cjs.map
