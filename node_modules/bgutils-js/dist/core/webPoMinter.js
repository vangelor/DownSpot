var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { base64ToU8, u8ToBase64 } from '../utils/helpers.js';
export default class WebPoMinter {
    constructor(mintCallback) {
        this.mintCallback = mintCallback;
    }
    static create(integrityTokenResponse, webPoSignalOutput) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const getMinter = webPoSignalOutput[0];
            if (!getMinter)
                throw new Error('PMD:Undefined');
            const mintCallback = yield getMinter(base64ToU8((_a = integrityTokenResponse.integrityToken) !== null && _a !== void 0 ? _a : ''));
            if (!(mintCallback instanceof Function))
                throw new Error('APF:Failed');
            return new WebPoMinter(mintCallback);
        });
    }
    mintAsWebsafeString(identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.mint(identifier);
            return u8ToBase64(result, true);
        });
    }
    mint(identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.mintCallback(new TextEncoder().encode(identifier));
            if (!result)
                throw new Error('YNJ:Undefined');
            if (!(result instanceof Uint8Array))
                throw new Error('ODM:Invalid');
            return result;
        });
    }
}
