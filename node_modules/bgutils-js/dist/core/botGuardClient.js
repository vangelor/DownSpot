var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export default class BotGuardClient {
    constructor(options) {
        this.vmFunctions = {};
        this.userInteractionElement = options.userInteractionElement;
        this.vm = options.globalObj[options.globalName];
        this.program = options.program;
    }
    static create(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new BotGuardClient(options).load();
        });
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.vm)
                throw new Error('[BotGuardClient]: VM not found in the global object');
            if (!this.vm.a)
                throw new Error('[BotGuardClient]: Could not load program');
            const vmFunctionsCallback = (asyncSnapshotFunction, shutdownFunction, passEventFunction, checkCameraFunction) => {
                Object.assign(this.vmFunctions, { asyncSnapshotFunction, shutdownFunction, passEventFunction, checkCameraFunction });
            };
            try {
                this.syncSnapshotFunction = yield this.vm.a(this.program, vmFunctionsCallback, true, this.userInteractionElement, () => { }, [[], []])[0];
            }
            catch (error) {
                throw new Error(`[BotGuardClient]: Failed to load program (${error.message})`);
            }
            return this;
        });
    }
    /**
     * @example
     * ```ts
     * const result = await botguard.snapshot({
     *   contentBinding: {
     *     c: "a=6&a2=10&b=SZWDwKVIuixOp7Y4euGTgwckbJA&c=1729143849&d=1&t=7200&c1a=1&c6a=1&c6b=1&hh=HrMb5mRWTyxGJphDr0nW2Oxonh0_wl2BDqWuLHyeKLo",
     *     e: "ENGAGEMENT_TYPE_VIDEO_LIKE",
     *     encryptedVideoId: "P-vC09ZJcnM"
     *    }
     * });
     *
     * console.log(result);
     * ```
     */
    snapshot(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                if (!this.vmFunctions.asyncSnapshotFunction)
                    return reject(new Error('[BotGuardClient]: Async snapshot function not found'));
                this.vmFunctions.asyncSnapshotFunction((response) => resolve(response), [
                    args.contentBinding,
                    args.signedTimestamp,
                    args.webPoSignalOutput,
                    args.skipPrivacyBuffer
                ]);
            });
        });
    }
    invoke(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.syncSnapshotFunction)
                throw new Error('[BotGuardClient]: Sync snapshot function not found');
            const result = yield this.syncSnapshotFunction([
                args.contentBinding,
                args.signedTimestamp,
                args.webPoSignalOutput,
                args.skipPrivacyBuffer
            ]);
            return result;
        });
    }
    passEvent(args) {
        if (!this.vmFunctions.passEventFunction)
            throw new Error('[BotGuardClient]: Pass event function not found');
        this.vmFunctions.passEventFunction(args);
    }
    checkCamera(args) {
        if (!this.vmFunctions.checkCameraFunction)
            throw new Error('[BotGuardClient]: Check camera function not found');
        this.vmFunctions.checkCameraFunction(args);
    }
    shutdown() {
        if (!this.vmFunctions.shutdownFunction)
            throw new Error('[BotGuardClient]: Shutdown function not found');
        this.vmFunctions.shutdownFunction();
    }
}
