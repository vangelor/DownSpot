"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Visitor_instances, _Visitor_getNode;
Object.defineProperty(exports, "__esModule", { value: true });
const Nodes = __importStar(require("./nodes/index.js"));
class Visitor {
    constructor() {
        _Visitor_instances.add(this);
        this.scope = new Map();
        this.listeners = {};
        this.ast = [];
    }
    setAST(ast) {
        this.ast = ast;
    }
    run() {
        let result;
        for (const node of this.ast) {
            result = this.visitNode(node);
        }
        return result;
    }
    /**
     * Visits a given node and executes it.
     */
    visitNode(node) {
        if (!node)
            return null;
        const target_node = __classPrivateFieldGet(this, _Visitor_instances, "m", _Visitor_getNode).call(this, node.type);
        if (target_node) {
            const instance = new target_node(node, this);
            return instance.run();
        }
    }
    /**
     * Gets the name of a node.
     * @param node - The target node.
     */
    getName(node) {
        if (node.type === 'Identifier')
            return node.name;
        else if (node.type === 'Literal')
            return node.value;
    }
    /**
     * Listens for node calls. Can be used to override default behavior or add new functionality.
     * @param node_name - The node to listen for.
     * @param listener - The callback function.
     */
    on(node_name, listener) {
        this.listeners[node_name] = listener;
    }
}
_Visitor_instances = new WeakSet(), _Visitor_getNode = function _Visitor_getNode(type) {
    const node = Nodes[type];
    return node;
};
exports.default = Visitor;
//# sourceMappingURL=visitor.js.map